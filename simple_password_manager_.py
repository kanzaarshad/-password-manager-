# -*- coding: utf-8 -*-
"""simple password manager .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EJ3kYQe77L77y8GzVJCQkOM10hMjGE9j
"""

!pip install cryptography

import os
import base64
from cryptography.fernet import Fernet
import json

# Generate a key for encryption and decryption
def generate_key():
    key = Fernet.generate_key()
    with open("secret.key", "wb") as key_file:
        key_file.write(key)

# Load the key
def load_key():
    return open("secret.key", "rb").read()

# Encrypt a password
def encrypt_password(password, key):
    f = Fernet(key)
    encrypted_password = f.encrypt(password.encode())
    return encrypted_password

# Decrypt a password
def decrypt_password(encrypted_password, key):
    f = Fernet(key)
    decrypted_password = f.decrypt(encrypted_password).decode()
    return decrypted_password

# Add a new password
def add_password(service, username, password, key):
    if not os.path.exists("passwords.json"):
        with open("passwords.json", "w") as f:
            json.dump({}, f)

    with open("passwords.json", "r") as f:
        passwords = json.load(f)

    encrypted_password = encrypt_password(password, key)
    passwords[service] = {"username": username, "password": encrypted_password.decode()}

    with open("passwords.json", "w") as f:
        json.dump(passwords, f)

# Get a password
def get_password(service, key):
    with open("passwords.json", "r") as f:
        passwords = json.load(f)

    if service in passwords:
        encrypted_password = passwords[service]["password"]
        username = passwords[service]["username"]
        decrypted_password = decrypt_password(encrypted_password.encode(), key)
        return username, decrypted_password
    else:
        return None

# Delete a password
def delete_password(service):
    with open("passwords.json", "r") as f:
        passwords = json.load(f)

    if service in passwords:
        del passwords[service]
        with open("passwords.json", "w") as f:
            json.dump(passwords, f)
        return True
    else:
        return False

# Example usage
if not os.path.exists("secret.key"):
    generate_key()

key = load_key()

# Add a password
add_password("example.com", "user123", "password123", key)

# Retrieve a password
username, password = get_password("example.com", key)
print(f"Username: {username}, Password: {password}")

# Delete a password
if delete_password("example.com"):
    print("Password deleted successfully")
else:
    print("Service not found")